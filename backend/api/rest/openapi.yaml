openapi: "3.0.0"

info:
  title: "Expense Tracker API"
  version: 1.0.0

servers:
  - url: "http://localhost:8080/api"
    description: development
  - url: "http://demo.com/api"
    description: production

tags:
  # - name: "user"
  #   description: ""
  - name: "expense"
    description: ""

paths:
  # expense
  # ----------------------------------------------------------------
  /v1/expenses:
    post:
      summary: Create an expense entry
      tags: ["expense"]
      requestBody:
        $ref: "#/components/requestBodies/NewExpense"
      responses:
        "201":
          description: Expense entry created successfully
          headers:
            Location:
              $ref: "#/components/headers/LocationHeader"
          content: {}
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"

    get:
      summary: Get expense entries
      tags: ["expense"]
      requestBody:
        $ref: "#/components/requestBodies/FindUser"
      responses:
        "200":
          description: The requested expense entries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expenses"
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"

  /v1/expenses/{expense_id}:
    get:
      summary: Get an expense entry by ID
      tags: ["expense"]
      requestBody:
        $ref: "#/components/requestBodies/FindUser"
      parameters:
        - name: expense_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: The requested expense entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Expense"
        "404":
          $ref: "#/components/responses/404_NotFound"
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"

    put:
      summary: Update an expense entry by ID
      tags: ["expense"]
      requestBody:
        $ref: "#/components/requestBodies/NewExpense"
      parameters:
        - name: expense_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "204":
          description: Expense entry updated successfully
        "404":
          $ref: "#/components/responses/404_NotFound"
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"

    delete:
      summary: Delete an expense entry by ID
      tags: ["expense"]
      requestBody:
        $ref: "#/components/requestBodies/FindUser"
      parameters:
        - name: expense_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "204":
          description: Expense entry deleted successfully
        "404":
          $ref: "#/components/responses/404_NotFound"
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"

  # # user
  # # ----------------------------------------------------------------
  /v1/users:
    post:
      summary: Create an user entry
      tags: ["user"]
      requestBody:
        $ref: "#/components/requestBodies/NewUser"
      responses:
        "201":
          description: User entry created successfully
          headers:
            Location:
              $ref: "#/components/headers/LocationHeader"
          content: {}
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"

    get:
      summary: Get user entries
      tags: ["user"]
      responses:
        "200":
          description: The requested user entries
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"

  /v1/users/{user_id}:
    get:
      summary: Get an user entry by ID
      tags: ["user"]
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: The requested user entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/404_NotFound"
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"
    put:
      summary: Update an user entry by ID
      tags: ["user"]
      requestBody:
        $ref: "#/components/requestBodies/NewUser"
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "204":
          description: User entry deleted successfully
        "404":
          $ref: "#/components/responses/404_NotFound"
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"

    delete:
      summary: Delete an user entry by ID
      tags: ["user"]
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "204":
          description: User entry deleted successfully
        "404":
          $ref: "#/components/responses/404_NotFound"
        "503":
          $ref: "#/components/responses/503_ServiceUnavailable"

components:
  schemas:
    # Expense
    # ----------------------------------------------------------------
    Expense:
      type: object
      properties:
        id: { type: integer, example: 1 }
        title: { type: string, example: payment }
        price: { type: integer, example: 100 }
        userId: { type: integer, example: 1 }
    Expenses:
      type: array
      items:
        $ref: "#/components/schemas/Expense"
    # User
    # ----------------------------------------------------------------
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: user }
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    # Error
    # ----------------------------------------------------------------
    NotFound:
      type: object
      properties:
        code: { type: string }
        type: { type: string }
        message: { type: string }
        errors:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              code: { type: string }
    ServiceUnavailable:
      type: object
      properties:
        code: { type: string }
        type: { type: string }
        message: { type: string }
        errors:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              code: { type: string }

  parameters:
    ExpenseId:
      name: expense_id
      in: path
      required: true
      schema:
        type: integer
        example: 1
    UserId:
      name: user_id
      in: path
      required: true
      schema:
        type: integer
        example: 1

  requestBodies:
    NewUser:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name: { type: string, example: "user" }

    FindUser:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              userId: { type: integer, example: "1" }

    NewExpense:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title: { type: string, example: "payment" }
              price: { type: integer, example: "100" }
              userId: { type: integer, "1" }
            # date:
            #   type: string
            #   format: date
            # description:
            #   type: string
            # amount:
            #   type: integer

  responses:
    404_NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFound"
    503_ServiceUnavailable:
      description: ServiceUnavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ServiceUnavailable"

  headers:
    LocationHeader:
      description: The location of the newly created item
      schema:
        type: string
